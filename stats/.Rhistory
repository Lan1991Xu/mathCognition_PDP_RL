mydata = read.csv('compUnit_samePf0.csv', header = F)
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('multiplot.R'); source('se.R')
# load data
mydata = read.csv('compUnit_samePf0.csv', header = F)
dim(mydata)
a = c('parameter', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7')
a
dim(a)
a
length(a)
a = c('parameter', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7')
length(a)
source('compTeachModes.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('/helperFunctions/multiplot.R'); source('/helperFunctions/se.R')
source('helperFunctions/multiplot.R');
source('compTeachModes.R')
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R')
# load data
mydata = read.csv('compUnit_samePf0.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
numOverallData = 7;
colnames(mydata) = c('parameter', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7')
# set the condition label (need to be revised when changing conditions!)
mydata$parameter[mydata$parameter == 0] = '1.finalRwdOnly'
mydata$parameter[mydata$parameter == 1] = '2.interm'
mydata$parameter[mydata$parameter == 2] = '3.demon'
mydata$parameter[mydata$parameter == 3] = '4.demon+interm'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
theme_set(theme_gray(base_size = 20))
################################################################################################
################################## Performance Overall #########################################
################################################################################################
overallData = mydata[,1:numOverallData]
overallData
overallData
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~parameter,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate), ser = mean(stopEarlyRate))
seOverallData = ddply(overallData,~parameter,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate), se_ser = se(stopEarlyRate))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~parameter,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate), ser = mean(stopEarlyRate))
seOverallData = ddply(overallData,~parameter,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate), se_ser = se(stopEarlyRate))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R')
# load data
mydata = read.csv('compUnit_samePf0.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
numOverallData = 7;
colnames(mydata) = c('parameter', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7')
# set the condition label (need to be revised when changing conditions!)
mydata$parameter[mydata$parameter == 0] = '1.finalRwdOnly'
mydata$parameter[mydata$parameter == 1] = '2.interm'
mydata$parameter[mydata$parameter == 2] = '3.demon'
mydata$parameter[mydata$parameter == 3] = '4.demon+interm'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
theme_set(theme_gray(base_size = 20))
################################################################################################
################################## Performance Overall #########################################
################################################################################################
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~parameter,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate), ser = mean(stopEarlyRate))
seOverallData = ddply(overallData,~parameter,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate), se_ser = se(stopEarlyRate))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
# do the plotting
limits = aes(ymax = ms + se_ms, ymin=ms - se_ms)
ggplot(meanOverallData, aes(x = parameter, y = ms, fill=parameter)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Mean number of steps used") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
limits = aes(ymax = ser + se_ser, ymin=ser - se_ser)
ggplot(meanOverallData, aes(x = parameter, y = ser, fill=parameter)) +
geom_bar(stat="identity") +
geom_errorbar(limits, width=0.15) +
labs(x = "Teaching mode", y = "Mean number of steps used") +
theme(axis.text.x = element_blank(),axis.ticks = element_blank(), legend.position="none")
source('compTeachModes.R')
source('plotBars')
source('plotBars.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_samePf0.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
numOverallData = 7;
colnames(mydata) = c('parameter', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7')
# set the condition label (need to be revised when changing conditions!)
mydata$parameter[mydata$parameter == 0] = '1.finalRwdOnly'
mydata$parameter[mydata$parameter == 1] = '2.interm'
mydata$parameter[mydata$parameter == 2] = '3.demon'
mydata$parameter[mydata$parameter == 3] = '4.demon+interm'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
theme_set(theme_gray(base_size = 20))
################################################################################################
################################## Performance Overall #########################################
################################################################################################
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~parameter,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate), ser = mean(stopEarlyRate))
seOverallData = ddply(overallData,~parameter,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate), se_ser = se(stopEarlyRate))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
plotBars(meanOverallData, ms, se_ms, 'xlab', 'ylab')
source('helperFunctions/plotBars.R')
plotBars(meanOverallData, ms, se_ms, 'xlab', 'ylab')
plotBars(meanOverallData, parameter,ms, se_ms, 'xlab', 'ylab')
plotBars(meanOverallData, parameter,ms, se_ms, 'xlab', 'ylab')
source('helperFunctions/plotBars.R')
plotBars(meanOverallData, parameter,ms, se_ms)
plotBars(meanOverallData, parameter,ms, se_ms)
source('helperFunctions/plotBars.R')
plotBars(meanOverallData, parameter,ms, se_ms)
plotBars(meanOverallData, parameter,ms, se_ms)
source('helperFunctions/plotBars.R')
plotBars(meanOverallData, parameter,ms, se_ms)
source('compTeachModes.R')
mydata
head(mydata)
source('compTeachModes.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_samePf0.csv', header = F)
numOverallData = 7;
colnames(mydata) = c('teachModes', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7')
# set the condition label (need to be revised when changing conditions!)
mydata$teachModes[mydata$teachModes == 0] = '1.finalRwdOnly'
mydata$teachModes[mydata$teachModes == 1] = '2.interm'
mydata$teachModes[mydata$teachModes == 2] = '3.demon'
mydata$teachModes[mydata$teachModes == 3] = '4.demon+interm'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
theme_set(theme_gray(base_size = 20))
################################################################################################
################################## Performance Overall #########################################
################################################################################################
overallData = mydata[,1:numOverallData]
meanOverallData = ddply(overallData,~teachModes,summarise,ms=mean(meanSteps),mr=mean(monoRate),
cr=mean(compRate),ccr=mean(correctCompRate),sr=mean(skipRate), ser = mean(stopEarlyRate))
seOverallData = ddply(overallData,~teachModes,summarise,se_ms=se(meanSteps),se_mr=se(monoRate),
se_cr=se(compRate),se_ccr=se(correctCompRate),se_sr=se(skipRate), se_ser = se(stopEarlyRate))
meanOverallData = data.frame(meanOverallData, seOverallData[,2:ncol(seOverallData)])
tempSelectVars <- c('teachModes',"SR1", "SR2", "SR3",'SR4', 'SR5', 'SR6', 'SR7')
SRData = mydata[tempSelectVars]
SRData
meanSRData = ddply(CCRData,~teachModes,summarise,one=mean(SR1),two=mean(SR2),
three=mean(SR3),four=mean(SR4),five=mean(SR5),six=mean(SR6),seven=mean(SR7))
meanSRData = ddply(SRData,~teachModes,summarise,one=mean(SR1),two=mean(SR2),
three=mean(SR3),four=mean(SR4),five=mean(SR5),six=mean(SR6),seven=mean(SR7))
seSRData = ddply(SRData,~teachModes,summarise,one=se(SR1),two=se(SR2),
three=se(SR3),four=se(SR4),five=se(SR5),six=se(SR6),seven=se(SR7))
# gather data by cardinality
meanSRData = gather(meanSRData, cardinality, meanSR, one:seven)
seSRData = gather(seSRData, cardinality, seSR, one:seven)
# attach the se to the end of the data frame
meanSRData <- data.frame(meanSRData, seSRData$seSR)
colnames(meanSRData)[ncol(meanSRData)] = 'seSR'
limits = aes(ymax = meanSR + seSR, ymin=meanSR - seSR)
# do the plotting
p4 = ggplot(data=meanSRData, aes(x=cardinality, y=meanSR, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
labs(x = "Number of items", y = "Mean correct completion rate")
ggplot(data=meanSRData, aes(x=cardinality, y=meanSR, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
labs(x = "Number of items", y = "Mean correct completion rate")
source('compTeachModes.R')
head(mydata)
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
p3
source('compTeachModes.R')
p3
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_dt0', header = F)
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_dt0.csv', header = F)
head(mydata)
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_dt0.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
numOverallData = 8;
colnames(mydata) = c('teachModes', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate', 'numDoubleTouch',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7',
'numDT1','numDT2','numDT3','numDT4','numDT5','numDT6','numDT7')
head(mydata)
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
mydata$teachModes[mydata$teachModes == 0] = '1.finalRwdOnly'
source('~/Dropbox/github/mathCognition/stats/compTeachModes.R', echo=TRUE)
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('compUnit_dt0.csv', header = F)
################################################################################################
################################## Preprocess the data #########################################
################################################################################################
# set the name (need to be revised when adding new variables!)
numOverallData = 8;
colnames(mydata) = c('teachModes', 'meanSteps', 'monoRate', 'compRate', 'correctCompRate',
'skipRate','stopEarlyRate', 'numDoubleTouch',
'steps1', 'steps2', 'steps3', 'steps4', 'steps5', 'steps6', 'steps7',
'CR1','CR2','CR3','CR4','CR5','CR6','CR7',
'CCR1','CCR2','CCR3','CCR4','CCR5','CCR6','CCR7',
'SR1','SR2','SR3','SR4','SR5','SR6','SR7',
'SER1','SER2','SER3','SER4','SER5','SER6','SER7',
'numErr1','numErr2','numErr3','numErr4','numErr5','numErr6','numErr7',
'DT1','DT2','DT3','DT4','DT5','DT6','DT7')
# set the condition label (need to be revised when changing conditions!)
mydata$teachModes[mydata$teachModes == 0] = '1.finalRwdOnly'
mydata$teachModes[mydata$teachModes == 1] = '2.interm'
mydata$teachModes[mydata$teachModes == 2] = '3.demon'
mydata$teachModes[mydata$teachModes == 3] = '4.demon+interm'
# convert correct rate to error rate
mydata$monoRate = 1 - mydata$monoRate
# set the font size
theme_set(theme_gray(base_size = 20))
tempSelectVars <- c('teachModes',"DT1", "DT2", "DT3",'DT4', 'DT5', 'DT6', 'DT7')
DTData = mydata[tempSelectVars]
DTData
meanDTData = ddply(DTData,~teachModes,summarise,one=mean(DT1),two=mean(DT2),
three=mean(DT3),four=mean(DT4),five=mean(DT5),six=mean(DT6),seven=mean(DT7))
seDTData = ddply(DTData,~teachModes,summarise,one=se(DT1),two=se(DT2),
three=se(DT3),four=se(DT4),five=se(DT5),six=se(DT6),seven=se(DT7))
# gather data by cardinality
meanDTData = gather(meanDTData, cardinality, meanDT, one:seven)
seDTData = gather(seDTData, cardinality, seDT, one:seven)
meanDTData
seDTData
meanDTData <- data.frame(meanDTData, seDTData$seDT)
colnames(meanDTData)[ncol(meanDTData)] = 'seDT'
limits = aes(ymax = meanDT + seDT, ymin=meanDT - seDT)
ggplot(data=meanDTData, aes(x=cardinality, y=meanDT, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 1) +
geom_errorbar(limits, width=0.15) +
labs(x = "Number of items", y = "Mean stop early rate")
meanDTData
ggplot(data=meanDTData, aes(x=cardinality, y=meanDT, group=teachModes, colour=teachModes)) +
geom_line(size = 1.25) + geom_point() + ylim(0, 5) +
geom_errorbar(limits, width=0.15) +
labs(x = "Number of items", y = "Mean stop early rate")
meanDTData
meanDTData$meanDT
max(meanDTData$meanDT)
max(meanDTData$meanDT) +.5
ceil(max(meanDTData$meanDT))
ceiling(max(meanDTData$meanDT))
source('compTeachModes.R')
multiplot(p1, p2, p3, p4, p5, p6, cols=2)
meanDTData$meanDT
meanDTData$meanDT + meanDTData$seDT
max(meanDTData$meanDT + meanDTData$seDT)
source('compTeachModes.R')
source('~/Dropbox/github/mathCognition/stats/compTeachModes.R', echo=TRUE)
source('~/Dropbox/github/mathCognition/stats/compTeachModes.R', echo=TRUE)
source('~/.active-rstudio-document')
source('~/Dropbox/github/mathCognition/stats/compTeachModes.R')
list.files
list.files()
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
dbinom(1,0.5,1)
dbinom(1, size=1, prob=0.2)
dbinom(1, size=1, prob=0.5)
dbinom(1, size=20, prob=0.5)
dbinom(12, size=20, prob=0.5)
dbinom(12, size=20, prob=0.25)
dbinom(12, size=20, prob=1/3)
for i = 1 : 10
n = 20;
p = 1/3;
for (i in 12:p ) {
dbinom(i, size=n, prob=p)
}
sum = 0;
for (i in 12:p ) {
sum = sum+dbinom(i, size=n, prob=p)
}
sum
1 - sum
12:p
n = 20;
p = 1/3;
sum = 0;
for (i in 12:n ) {
sum = sum+dbinom(i, size=n, prob=p)
}
sum
n = 20
p = 1/3
lowerBound = 12
n = 5
p = .4
lowerBound = 3
sum = 0;
for (i in lowerBound:n ) {
sum = sum+dbinom(i, size=n, prob=p)
}
sum
n = 7
p = .4
lowerBound = 4
sum = 0;
for (i in lowerBound:n ) {
sum = sum+dbinom(i, size=n, prob=p)
}
sum
dpois(10, 2, log = FALSE)
lambda = 2
x = 10
sum = 0
for(i in 1:x){
sum = sum + dpois(x, lambda, log = FALSE)
}
sum
help dpoi
help dpois
? dpois
lambda = 2
x = 10
sum = 0
for(i in 0:x){
sum = sum + dpois(x, lambda, log = FALSE)
}
sum
lambda = 2
x = 10
sum = 0
for(i in 0:x){
sum = sum + dpois(x, lambda, log = FALSE)
}
sum
lambda = 2
x = 10
sum = 0
for(i in 0:x){
sum = sum + dpois(i, lambda, log = FALSE)
}
sum
lambda = 2
x = 0
sum = 0
for(i in 0:x){
sum = sum + dpois(i, lambda, log = FALSE)
}
sum
0:x
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
# source('helperFunctions/plotBars.R')
# load data
mydata = read.csv('diffNoise.csv', header = F)
source('~/Dropbox/github/mathCognition/stats/compTeachModes.R')
# Compare the performance across different ways of teaching
rm(list = ls())
library(ggplot2); library(plyr); library(tidyr); library(dplyr)
setwd('/Users/Qihong/Dropbox/github/mathCognition/stats')
source('helperFunctions/multiplot.R'); source('helperFunctions/se.R');
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
source('compTeachModes.R')
